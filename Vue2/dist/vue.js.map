{"version":3,"file":"vue.js","sources":["../src/observe/array.js","../src/observe/index.js","../src/state.js","../src/compiler/parser-html.js","../src/compiler/index.js","../src/init.js","../src/index.js"],"sourcesContent":["// 重新数组中的部分方法\n\nlet oldArrayProto = Array.prototype // 获取数组的原型\n\n// Array.prototype.push = function() { 这样会把原来的push功能干掉了，我们需要原来的功能还在，此时我们可以拷贝一份\n// }\n\n// newArrayProto.__proto__ = oldArrayProto\nexport let newArrayProto = Object.create(oldArrayProto)\n\nlet methods = [\n    'push',\n    'pop',\n    'shift',\n    'unshift',\n    'reserve',\n    'sort',\n    'splice'\n] // concat slice都不会改变原数组\n\nmethods.forEach(method => {\n    newArrayProto[method] = function (...args) { // 重写了数组的方法\n        const result = oldArrayProto[method].call(this, ...args) // 内部调用原来的方法，函数劫持。AOP\n        // this 就是 data\n        // 需要对新增的数据 再次进行劫持\n        let inserted;\n        let ob = this.__ob__\n        switch (method) {\n            case 'push':\n            case 'unshift': // arr.push(1, 2, 3)\n                inserted = args\n                break;\n            case 'splice': // arr.splice(0, 1, {}, {}...)\n                inserted = args.slice(2)\n            default:\n                break;\n        }\n        console.log('inserted', inserted) // 新增的内容\n        if (inserted) { // inserted是数组类型，观察数组，要调用observeArray方法\n            ob.observeArray(inserted)\n        }\n        return result\n    }\n})","import {\n    newArrayProto\n} from \"./array\"\n\nclass Observer {\n    constructor(data) {\n        // data.__ob__ = this; // this为observe,放在data的自定义__ob__属性上;这样的好处：给数组加了一个标识，如果数据上有__ob__，说明数据已经被观察过了\n\n        // 如果data不是数组是对象，这样给对象添加这个__ob__属性，然后去循环，会出现死循环\n\n        Object.defineProperty(data, '__ob__', {\n            value: this,\n            enumerable: false // 不可枚举（循环的时候，无法获取）\n        })\n\n\n        // Object.defineProperty只能劫持已存在的属性，对新增属性和删除属性不劫持（为此vue2单独写了一些API来解决$set $delete）\n        if (Array.isArray(data)) { // 如果是数组就有两种情况：第一：重写7个方法、第二：数组中的引用类型也需要劫持\n            // 重新数组中的方法，7个方法可以修改数组本身的。还有将数组中的引用类型也需要劫持\n            // data.__proto__ = { 不采用这种方式是因为会把原始的push给干掉了\n            //     push() {\n            //         console.log('重写的push')\n            //     }\n            data.__proto__ = newArrayProto // 拦截方法，并没有对新增的属性做劫持？\n            // } 保留数组原有的特性：concat join等，并且重新部分的方法\n            this.observeArray(data)\n        } else {\n            this.walk(data) // 遍历对象\n        }\n    }\n    walk(data) { // 循环对象 对属性依次劫持\n        // 拿到每个属性，“重新定义”每个属性，导致性能不好\n        Object.keys(data).forEach(key => defineReactive(data, key, data[key]))\n    }\n    observeArray(data) { // 将数组中的引用类型也需要劫持\n        data.forEach(item => observe(item))\n    }\n}\n\n// 闭包（get set方法 都能拿到value）\nexport function defineReactive(target, key, value) { // 属性劫持\n    observe(value) // value可能是对象，递归劫持。对所有的对象属性进行劫持\n    Object.defineProperty(target, key, {\n        get() { // 取值的时候会执行get\n            console.log('取值了')\n            return value\n        },\n        set(newVal) { // 设置值的时候会执行set\n            console.log('设置值了')\n            if (newVal === value) return\n            observe(newVal) // 有可能用户设置的值也是对象\n            value = newVal\n        }\n    })\n}\n\nexport function observe(data) {\n    // 对这个data对象进行劫持\n    if (typeof data !== 'object' || data === null) {\n        return // 只对对象进行劫持\n    }\n\n    if (data.__ob__ instanceof Observer) { // 说明这个对象已经被代理过了\n        return data.__ob__\n    }\n\n    // 如果一个对象被劫持过了，那就不要再被劫持了（如何判断一个对象是否被劫持过？可以新增一个实例，用实例来判断是否被劫持过）\n    return new Observer(data)\n}","import {\n    observe\n} from \"./observe/index.js\"\n\nexport function initState(vm) {\n    const opts = vm.$options\n    if (opts.data) {\n        initData(vm)\n    }\n}\n\nfunction proxy(vm, target, key) {\n    Object.defineProperty(vm, key, {\n        get() {\n            return vm[target][key] // vm.name === vm._data.name\n        },\n        set(newVal) {\n            vm[target][key] = newVal\n        }\n    })\n}\n\nfunction initData(vm) {\n    let data = vm.$options.data\n    data = typeof data === 'function' ? data.call(vm) : data\n\n    vm._data = data // 在实例上可以获取数据\n\n    // 拿到数据后，要对数据劫持。vue2里采用了一个api, defineProperty\n    observe(data) // 观测数据，单独\n\n    // 将vm._data用vm代理\n    for (let key in data) {\n        proxy(vm, '_data', key)\n    }\n}","// ?: 匹配不捕获\nconst attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/ // 匹配属性的\n// const dynamicArgAttribute = /^\\s*((?:v-[\\w-]+:|@|:|#)\\[[^=]+?\\][^\\s\"'<>\\/=]*)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/\nconst ncname = `[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z]*` // abc-aaa\nconst qnameCapture = `((?:${ncname}\\\\:)?${ncname})` // <aaa:asasas>\nconst startTagOpen = new RegExp(`^<${qnameCapture}`) // 标签开头的正则  捕获的内容是标签名\n// const defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g // {{}}\n// const regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g\n\nconst startTagClose = /^\\s*(\\/?)>/ // 匹配标签结束的 > <div >\nconst endTag = new RegExp(`^<\\\\/${qnameCapture}[^>]*>`) // 匹配标签结尾的</div>\n// const doctype = /^<!DOCTYPE [^>]+>/i\n// // #7298: escape - to avoid being passed as HTML comment when inlined in page\n// const comment = /^<!\\--/\n// const conditionalComment = /^<!\\[/ // 解析是否是条件注释\n\nlet root = null // ast语法树的树根\nlet currentParent // 标识当前父亲是谁\nlet stack = []\nconst ELEMENT_TYPE = 1 // 元素\nconst TEXT_TYPE = 3 // 文本\n\nfunction createASTElement(tagName, attrs) {\n    return {\n        tag: tagName,\n        type: ELEMENT_TYPE,\n        children: [],\n        attrs,\n        parent: null\n    }\n}\n\n// 开始\nfunction start(tagName, attrs) {\n    console.log('开始标签：', tagName, '属性是：', attrs)\n    // 遇到开始标签  就创建一个ast元素\n    let element = createASTElement(tagName, attrs)\n    if (!root) {\n        root = element\n    }\n    currentParent = element // 把当前元素标记为父ast树\n    stack.push(element) // 将开始标签存入栈中\n}\n\n// 文本\nfunction chars(text) {\n    console.log('文本是：', text)\n    text = text.replace(/\\s/g, '')\n    if (text) {\n        currentParent.children.push({\n            text,\n            type: TEXT_TYPE\n        })\n    }\n}\n\n// 标签闭合\nfunction end(tagName) {\n    console.log('结束标签：', tagName)\n    let element = stack.pop()\n    // 要标识当前这个p是属于这个div的儿子的\n    currentParent = stack[stack.length - 1]\n    if (currentParent) {\n        element.parent = currentParent\n        currentParent.children.push(element) // 实现了一个树的父子关系\n    }\n}\n\nexport function parseHTML(html) {\n    // 不停地的解析HTML字符串\n    while (html) {\n        let textEnd = html.indexOf('<')\n        if (textEnd === 0) {\n            // 如果当前索引为0 肯定是一个标签，（开始标签、结束标签）\n            let startTagMatch = parseStartTag() // 通过这个方法获取到匹配的结果，tagName attrs\n            if (startTagMatch) {\n                start(startTagMatch.tagName, startTagMatch.attrs) // 1、解析开始标签\n                continue // 如果开始标签匹配完毕后，继续下一次\n            }\n            let endTagMatch = html.match(endTag) // 结束标签\n            if (endTagMatch) {\n                advance(endTagMatch[0].length)\n                end(endTagMatch[1]) // 2、解析结束标签\n                continue\n            }\n        }\n        let text\n        if (textEnd >= 0) {\n            text = html.substring(0, textEnd)\n        }\n        if (text) {\n            advance(text.length) // 去掉空的字符串\n            chars(text) // 3、解析文本\n        }\n    }\n\n    function advance(n) {\n        html = html.substring(n)\n    }\n\n    function parseStartTag() {\n        let start = html.match(startTagOpen)\n        if (start) {\n            const match = {\n                tagName: start[1],\n                attrs: []\n            }\n            advance(start[0].length) // 将标签删除\n            // console.log(html)\n            let end, attr\n            while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\n                advance(attr[0].length) // 将属性删除\n                match.attrs.push({\n                    name: attr[1],\n                    value: attr[3] || attr[4] || attr[5]\n                })\n            }\n            if (end) {\n                advance(end[0].length) // 去掉开始标签的 > \n                return match\n            }\n            console.log(html, match)\n        }\n    }\n\n    return root\n}","// ast抽象语法树 是用对象来描述原生语法的  虚拟dom 用对象来描述dom节点\n\nimport {\n    parseHTML\n} from \"./parser-html\"\n\n// 主要通过正则匹配加循环来完成的\n// 把一个HTML不停地循环拿出来后组成一棵树，这个树描述了我们当前的DOM结构\nexport function compilerToFunction(template) {\n    // 1、解析HTML字符串，将HTML字符串 -》ast语法树\n    let root = parseHTML(template)\n    console.log(root)\n    return function render() {\n\n    }\n}","import {\n    initState\n} from \"./state\"\n\nimport {\n    compilerToFunction\n} from './compiler/index.js'\n\n// 初始化\nexport function initMixin(Vue) {\n    Vue.prototype._init = function (options) {\n        console.log('options', options)\n        // 在当前的实例上扩展一些属性$options $data...\n        // 为什么要定义这些属性？如果使用使用options的话，在其他扩展方法里拿不到。扩展一些属性，可以通过this拿到这个属性\n        // 为什么属性要以$开头，认为是Vue自己的属性。如果自己在data中用$定义变量，实例上拿不到的\n        const vm = this\n        vm.$options = options // 将用户的选项挂载实例上\n\n        // 初始化状态/数据（Vue中的状态：props、data、computed、methods、watch）\n        initState(vm)\n        // todo...模板编译、创建虚拟dom。。。\n\n\n        // 如果用户传了el属性，需要将页面渲染出来\n        // 如果用户传入了el，就要实现挂载流程\n        if (vm.$options.el) {\n            vm.$mount(vm.$options.el)\n        }\n    }\n\n    Vue.prototype.$mount = function (el) {\n        const vm = this\n        const options = vm.$options\n        el = document.querySelector(el)\n        // 默认会先查找render方法，-》template -> el的内容\n\n        if (!options.render) {\n            // 对模板进行编译\n            let template = options.template\n            if (!template && el) {\n                template = el.outerHTML\n            }\n            console.log(template)\n            // 我们需要将template 转化成render函数\n            const render = compilerToFunction(template)\n            options.render = render\n        }\n    }\n}\n\n// 状态初始化，和初始化没什么关系，需拆分单独管理\n// function initState(vm) {\n//     const opts = vm.$options\n//     // if (opts.props)\n//     if (opts.data) {\n//         initData(vm)\n//     }\n// }\n// function initData(vm) {\n//     let data = vm.$options.data\n//     // data可以是对象或函数[根使用可以是对象也可以是函数；组件一定是函数]（Vue3解决了，认为都是函数）\n//     data = typeof data === 'function' ? data.call(vm) : data\n//     console.log('data', data)\n// }","// vue源码里没有直接使用class定义一个类。类的特点：将所有的方法都耦合在一起，功能越来越多，很难维护。vue在设计的时候使用构造函数，把扩展的内容挂载到原型上，放到不同的文件中，好维护。\n\nimport {\n    initMixin\n} from \"./init\"\n\nfunction Vue(options) {\n    this._init(options)\n}\n\n// 初始化\ninitMixin(Vue) // 扩展了init方法\n// Vue.prototype._init = function () {\n\n// }\n// 把原型上方法扩展成一个个的函数，通过函数的方式，在其原型上扩展功能\n\nexport default Vue"],"names":["oldArrayProto","Array","prototype","newArrayProto","Object","create","methods","forEach","method","_oldArrayProto$method","_len","arguments","length","args","_key","result","call","apply","concat","inserted","ob","__ob__","slice","console","log","observeArray","Observer","data","_classCallCheck","defineProperty","value","enumerable","isArray","__proto__","walk","_createClass","key","keys","defineReactive","item","observe","target","get","set","newVal","_typeof","initState","vm","opts","$options","initData","proxy","_data","attribute","ncname","qnameCapture","startTagOpen","RegExp","startTagClose","endTag","root","currentParent","stack","ELEMENT_TYPE","TEXT_TYPE","createASTElement","tagName","attrs","tag","type","children","parent","start","element","push","chars","text","replace","end","pop","parseHTML","html","textEnd","indexOf","startTagMatch","parseStartTag","endTagMatch","match","advance","substring","n","attr","name","compilerToFunction","template","render","initMixin","Vue","_init","options","el","$mount","document","querySelector","outerHTML"],"mappings":"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"}