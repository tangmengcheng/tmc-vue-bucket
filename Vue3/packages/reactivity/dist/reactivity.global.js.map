{"version":3,"file":"reactivity.global.js","sources":["../../shared/src/index.ts","../src/baseHandlers.ts","../src/reactive.ts"],"sourcesContent":["export const isObject = (value) => typeof value === 'object' && value !== null\n\nexport const extend = Object.assign","// 是不是仅读的，没有set，会报异常\n// 是不是深度的\n\nimport { extend, isObject } from \"@vue/shared\"\nimport { reactive, readonly } from \"./reactive\"\n\nconst get = createGetter()\nconst shallowGet = createGetter(false, true)\nconst readonlyGet = createGetter(true)\nconst shallowReadonlyGet = createGetter(true, true)\n\nconst set = createSetter()\nconst shallowSet = createSetter(true)\n\nexport const mutableHandlers = {\n    get,\n    set\n}\nexport const shallowReactiveHandlers = {\n    get: shallowGet,\n    shallowSet\n}\nconst readonlyObj = {\n    set: (target, key) => {\n        console.warn(`set ${target} on key ${key} failed`)\n    }\n}\nexport const readonlyHandlers = extend({\n    get: readonlyGet  \n}, readonlyObj)\nexport const shallowReadonlyHandles = extend({\n    get: shallowReadonlyGet\n}, readonlyObj)\n\n// 拦截获取功能\nfunction createGetter (isReadonly = false, shallow = false) {\n    return function get(target, key, receiver) {\n        // proxy + reflect\n        // 后续Object上的方法，会被迁移到 Reflect上  Reflect.getProperty)\n        // 以前target[key] = value 方法设置值可能会失败，但是不会报异常，也没有返回值\n        // Reflect 方法具备返回值\n        const res = Reflect.get(target, key, receiver) // target[key]\n\n        if (!isReadonly) {\n            // 收集依赖，等会数据变化后更新对应的试图\n        }\n        if (shallow) {\n            return res\n        }\n        if (isObject(res)) { // vue2 是一上来就递归，vue3是当前取值时会进行代理。称为懒代理\n            return isReadonly ? readonly(res) : reactive(res)\n        }\n        return res\n    }\n}\n// 拦截设置功能\nfunction createSetter(shallow = false) {\n    return function set(target, key, value, receiver) {\n        const result = Reflect.set(target, key, value, receiver) // target[key] = value\n        return result\n    }\n}","import { isObject } from '@vue/shared'\n\nimport {\n    mutableHandlers,\n    shallowReactiveHandlers,\n    readonlyHandlers,\n    shallowReadonlyHandles\n} from './baseHandlers'\n\nexport function reactive(target) {\n    return createReactiveObject(target, false, mutableHandlers)\n}\n\nexport function shallowReactive(target) {\n    return createReactiveObject(target, false, shallowReactiveHandlers)\n}\n\nexport function readonly(target) {\n    return createReactiveObject(target, true, readonlyHandlers)\n}\n\nexport function shallowReadonly(target) {\n    return createReactiveObject(target, true, shallowReadonlyHandles)\n}\n\nconst reactiveMap = new WeakMap() // 会自动垃圾回收，不会造成内存泄露，存储的key只能是对象\nconst readonlyMap = new WeakMap()\n\n/**\n * 柯里化，new Proxy() 最核心的需要拦截数据的读取和修改 -> get set\n * @param target 目标对象\n * @param isReadonly 是否只读\n * @param baseHandlers 处理器函数\n */\nexport function createReactiveObject(target, isReadonly, baseHandlers) {\n    // 如果目标不是对象，没法拦截，reactive这个api只能拦截对象\n    if(!isObject(target)) {\n        return target\n    }\n\n    // 如果某个对象已经被代理过了，就不要再代理了(可能一个对象被代理是深度，又被仅读代理)\n    const proxyMap = isReadonly ? readonlyMap : reactiveMap\n\n    const existProxy = proxyMap.get(target)\n    if (existProxy) {\n        return existProxy // 如果已经被代理了 直接返回即可\n    }\n\n    const proxy = new Proxy(target, baseHandlers)\n\n    proxyMap.set(target, proxy) // 将要代理的对象和对应代理结果缓存起来\n\n    return proxy\n}"],"names":[],"mappings":";;;IAAO,MAAM,QAAQ,GAAG,CAAC,KAAK,KAAK,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,KAAK,IAAI,CAAA;IAEvE,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM;;ICFnC;IAMA,MAAM,GAAG,GAAG,YAAY,EAAE,CAAA;IAC1B,MAAM,UAAU,GAAG,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,CAAA;IAC5C,MAAM,WAAW,GAAG,YAAY,CAAC,IAAI,CAAC,CAAA;IACtC,MAAM,kBAAkB,GAAG,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;IAEnD,MAAM,GAAG,GAAG,YAAY,EAAE,CAAA;IAC1B,MAAM,UAAU,GAAG,YAAY,CAAC,IAAI,CAAC,CAAA;IAE9B,MAAM,eAAe,GAAG;QAC3B,GAAG;QACH,GAAG;KACN,CAAA;IACM,MAAM,uBAAuB,GAAG;IACnC,IAAA,GAAG,EAAE,UAAU;QACf,UAAU;KACb,CAAA;IACD,MAAM,WAAW,GAAG;IAChB,IAAA,GAAG,EAAE,CAAC,MAAM,EAAE,GAAG,KAAI;YACjB,OAAO,CAAC,IAAI,CAAC,CAAA,IAAA,EAAO,MAAM,CAAW,QAAA,EAAA,GAAG,CAAS,OAAA,CAAA,CAAC,CAAA;SACrD;KACJ,CAAA;IACM,MAAM,gBAAgB,GAAG,MAAM,CAAC;IACnC,IAAA,GAAG,EAAE,WAAW;KACnB,EAAE,WAAW,CAAC,CAAA;IACR,MAAM,sBAAsB,GAAG,MAAM,CAAC;IACzC,IAAA,GAAG,EAAE,kBAAkB;KAC1B,EAAE,WAAW,CAAC,CAAA;IAEf;IACA,SAAS,YAAY,CAAE,UAAU,GAAG,KAAK,EAAE,OAAO,GAAG,KAAK,EAAA;IACtD,IAAA,OAAO,SAAS,GAAG,CAAC,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAA;;;;;IAKrC,QAAA,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,EAAE,QAAQ,CAAC,CAAA;IAK9C,QAAA,IAAI,OAAO,EAAE;IACT,YAAA,OAAO,GAAG,CAAA;IACb,SAAA;IACD,QAAA,IAAI,QAAQ,CAAC,GAAG,CAAC,EAAE;IACf,YAAA,OAAO,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAA;IACpD,SAAA;IACD,QAAA,OAAO,GAAG,CAAA;IACd,KAAC,CAAA;IACL,CAAC;IACD;IACA,SAAS,YAAY,CAAC,OAAO,GAAG,KAAK,EAAA;QACjC,OAAO,SAAS,GAAG,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,QAAQ,EAAA;IAC5C,QAAA,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAA;IACxD,QAAA,OAAO,MAAM,CAAA;IACjB,KAAC,CAAA;IACL;;ICpDM,SAAU,QAAQ,CAAC,MAAM,EAAA;QAC3B,OAAO,oBAAoB,CAAC,MAAM,EAAE,KAAK,EAAE,eAAe,CAAC,CAAA;IAC/D,CAAC;IAEK,SAAU,eAAe,CAAC,MAAM,EAAA;QAClC,OAAO,oBAAoB,CAAC,MAAM,EAAE,KAAK,EAAE,uBAAuB,CAAC,CAAA;IACvE,CAAC;IAEK,SAAU,QAAQ,CAAC,MAAM,EAAA;QAC3B,OAAO,oBAAoB,CAAC,MAAM,EAAE,IAAI,EAAE,gBAAgB,CAAC,CAAA;IAC/D,CAAC;IAEK,SAAU,eAAe,CAAC,MAAM,EAAA;QAClC,OAAO,oBAAoB,CAAC,MAAM,EAAE,IAAI,EAAE,sBAAsB,CAAC,CAAA;IACrE,CAAC;IAED,MAAM,WAAW,GAAG,IAAI,OAAO,EAAE,CAAA;IACjC,MAAM,WAAW,GAAG,IAAI,OAAO,EAAE,CAAA;IAEjC;;;;;IAKG;aACa,oBAAoB,CAAC,MAAM,EAAE,UAAU,EAAE,YAAY,EAAA;;IAEjE,IAAA,IAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;IAClB,QAAA,OAAO,MAAM,CAAA;IAChB,KAAA;;QAGD,MAAM,QAAQ,GAAG,UAAU,GAAG,WAAW,GAAG,WAAW,CAAA;QAEvD,MAAM,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;IACvC,IAAA,IAAI,UAAU,EAAE;YACZ,OAAO,UAAU,CAAA;IACpB,KAAA;QAED,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,MAAM,EAAE,YAAY,CAAC,CAAA;QAE7C,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAAA;IAE3B,IAAA,OAAO,KAAK,CAAA;IAChB;;;;;;;;;;;;;;;"}